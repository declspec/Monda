<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Monda</name>
    </assembly>
    <members>
        <member name="T:Monda.ParseFunction`2">
            <summary>
            Delegate that attempts to parse a result from an input data set, beginning at a specific point
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of the parser</typeparam>
            <param name="data">Input data to parse</param>
            <param name="start">Initial position to begin parsing from</param>
            <param name="trace">A <see cref="T:Monda.ParserTrace"/> which can be passed to other parser functions to assist in debugging</param>
            <returns>A <see cref="T:Monda.ParseResult`1"/> indicating the success or failure of the parse attempt</returns>
        </member>
        <member name="T:Monda.ParserPredicate`1">
            <summary>
            Predicate that tests the <typeparamref name="TSource"/> item at the current index.
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="data">Input data to parse</param>
            <param name="index">Index of the current item in <paramref name="data" /> to test</param>
            <returns>True if the <typeparamref name="TSource"/> item at the current index is acceptable, false otherwise</returns>
        </member>
        <member name="T:Monda.Parser`2">
            <summary>
            Fundamental parsing unit to extract one <typeparamref name="TResult"/> output from a set of <typeparamref name="TSource"/> input items
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of the parser</typeparam>
        </member>
        <member name="T:Monda.Parser">
            <summary>
            Static Parser helper methods
            </summary>
        </member>
        <member name="M:Monda.Parser.Is``1(``0)">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a single <typeparamref name="TSource"/> item if it equals <paramref name="value"/>, using the default comparer for <typeparamref name="TSource"/> to compare items
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="value">Item to match</param>
            <returns>A parser that will succeed if the <typeparamref name="TSource"/> item at the parser's current position equals <paramref name="value"/></returns>
        </member>
        <member name="M:Monda.Parser.Is``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a single <typeparamref name="TSource"/> item if it equals <paramref name="value"/>, using the <paramref name="comparer"/> to compare items.
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="value">Item to compare</param>
            <param name="comparer">Comparer used to determine equality between <typeparamref name="TSource"/> items</param>
            <returns>A <see cref="T:Monda.Parser`2"/> that will succeed if the <typeparamref name="TSource"/> item at the parser's current position equals <paramref name="value"/></returns>
        </member>
        <member name="M:Monda.Parser.IsSequence``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> if the sequence of items at the current position equals <paramref name="value"/>, using the default comparer for <typeparamref name="TSource"/> to compare items
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="value"><see cref="T:System.ReadOnlyMemory`1"/> containing the sequence of <typeparamref name="TSource"/> items to compare</param>
            <returns>A <see cref="T:Monda.Parser`2"/> that will succeed if the sequence of <typeparamref name="TSource"/> items at the parser's current position equals <paramref name="value"/></returns>
        </member>
        <member name="M:Monda.Parser.IsSequence``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> if the sequence of items at the current position equals <paramref name="value"/>, using <paramref name="comparer"/> to compare items
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="value"><see cref="T:System.ReadOnlyMemory`1"/> containing the sequence of <typeparamref name="TSource"/> items to compare</param>
            <param name="comparer">Comparer used to determine equality between <typeparamref name="TSource"/> items</param>
            <returns>A <see cref="T:Monda.Parser`2"/> that will succeed if the sequence of <typeparamref name="TSource"/> items at the parser's current position equals <paramref name="value"/></returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> or <paramref name="comparer"/> is null</exception>
        </member>
        <member name="M:Monda.Parser.IsNot``1(``0)">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a single <typeparamref name="TSource"/> item if it does not equal <paramref name="value"/>, using the default comparer for <typeparamref name="TSource"/> to compare items
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="value">Item to match</param>
            <returns>A parser that will succeed if the <typeparamref name="TSource"/> item at the parser's current position does not equal <paramref name="value"/></returns>
        </member>
        <member name="M:Monda.Parser.IsNot``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a single <typeparamref name="TSource"/> item if it does not equal <paramref name="value"/>, using <paramref name="comparer"/> to compare items
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="value">Item to match</param>
            <param name="comparer">Comparer used to determine equality between <typeparamref name="TSource"/> items</param>
            <returns>A parser that will succeed if the <typeparamref name="TSource"/> item at the parser's current position does not equal <paramref name="value"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null</exception>
        </member>
        <member name="M:Monda.Parser.IsAny``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a single <typeparamref name="TSource"/> item if it exists in <paramref name="values"/>, using the default comparer for <typeparamref name="TSource"/> to compare items
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="values">Item to compare</param>
            <returns>A <see cref="T:Monda.Parser`2"/> that will succeed if the <typeparamref name="TSource"/> item at the parser's current position exists in <paramref name="values"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null</exception>
        </member>
        <member name="M:Monda.Parser.IsAny``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a single <typeparamref name="TSource"/> item if it exists in <paramref name="values"/>, using <paramref name="comparer"/> to compare values
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="values">Item to compare</param>
            <param name="comparer">Comparer to use to determine equality between <typeparamref name="TSource"/> items</param>
            <returns>A <see cref="T:Monda.Parser`2"/> that will succeed if the <typeparamref name="TSource"/> item at the parser's current position exists in <paramref name="values"/></returns>
            <exception cref="T:System.ArgumentException"><paramref name="values"/> is empty</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> or <paramref name="comparer"/> is null</exception>
        </member>
        <member name="M:Monda.Parser.IsNotAny``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a single <typeparamref name="TSource"/> item if it does not exist in <paramref name="values"/>, using the default comparer for <typeparamref name="TSource"/> to compare items
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="values">Item to compare</param>
            <returns>A <see cref="T:Monda.Parser`2"/> that will succeed if the <typeparamref name="TSource"/> item at the parser's current position does not exist in <paramref name="values"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null</exception>
        </member>
        <member name="M:Monda.Parser.IsNotAny``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2"/> that yields a single <typeparamref name="TSource"/> item if it does not exist in <paramref name="values"/>, using <paramref name="comparer"/> to compare values
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="values">Item to compare</param>
            <param name="comparer">Comparer to use to determine equality between <typeparamref name="TSource"/> items</param>
            <returns>A <see cref="T:Monda.Parser`2"/> that will succeed if the <typeparamref name="TSource"/> item at the parser's current position does not exist in <paramref name="values"/></returns>
            <exception cref="T:System.ArgumentException"><paramref name="values"/> is empty</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> or <paramref name="comparer"/> is null</exception>
        </member>
        <member name="M:Monda.Parser.TakeWhile``1(System.Func{``0,System.Boolean},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2" /> that yields the range of <typeparamref name="TSource"/> items from the current parser position matching <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="predicate">Predicate that is invoked for each <typeparamref name="TSource"/> item</param>
            <param name="min">Minimum number of matches required (inclusive)</param>
            <param name="max">Maximum number of matches allowed (inclusive)</param>
            <returns>A <see cref="T:Monda.Parser`2"/> that yields the <see cref="T:Monda.Range"/> of data that was matched</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/> is less than 0 or <paramref name="max"/> is less than <paramref name="min"/></exception>
        </member>
        <member name="M:Monda.Parser.TakeWhile``1(Monda.ParserPredicate{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:Monda.Parser`2" /> that yields the range of <typeparamref name="TSource"/> items from the current parser position matching <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <param name="predicate">Predicate that is invoked for each <typeparamref name="TSource"/> item</param>
            <param name="min">Minimum number of matches required (inclusive)</param>
            <param name="max">Maximum number of matches allowed (inclusive)</param>
            <returns>A <see cref="T:Monda.Parser`2"/> that yields the <see cref="T:Monda.Range"/> of data that was matched</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/> is less than 0 or <paramref name="max"/> is less than <paramref name="min"/></exception>
            <remarks>The <see cref="T:System.ReadOnlySpan`1"/> passed to <paramref name="predicate"/> is a slice starting at the parser's intial position and the index will increase from 0</remarks>
        </member>
        <member name="M:Monda.Parser.TakeUntil``2(Monda.Parser{``0,``1},System.Int32)">
            <summary>
            Creates a <see cref="T:Monda.Parser`2" /> that yields the range of <typeparamref name="TSource"/> items from the current parser until <paramref name="next"/> succeeds
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TNext">The return type of the next parser</typeparam>
            <param name="next">A <see cref="T:Monda.Parser`2"/> that will succeed at the end of the range</param>
            <param name="min">Minimum number of matches required (inclusive)</param>
            <returns>A <see cref="!:Parser&lt;TSource, Tuple&lt;Range, TNext&gt;&gt;"/> that yields a tuple containing the <see cref="T:Monda.Range" /> that was matched and the result of <paramref name="next"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="next"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/> is less than 0</exception>
        </member>
        <member name="T:Monda.ParseResult`1">
            <summary>
            Represents the result of a parsing operation
            </summary>
            <typeparam name="TValue">Underlying value type</typeparam>
            <seealso cref="M:Monda.ParseResult.Success``1(``0@,System.Int32,System.Int32)"/>
            <seealso cref="M:Monda.ParseResult.Fail``1"/>
            <seealso cref="M:Monda.ParseResult.Fail``1(``0@)"/>
        </member>
        <member name="P:Monda.ParseResult`1.Value">
            <summary>The underlying result value</summary>
        </member>
        <member name="P:Monda.ParseResult`1.Start">
            <summary>The position in the data source where this result started</summary>
        </member>
        <member name="P:Monda.ParseResult`1.Length">
            <summary>The length of data in the data source used to construct this result</summary>
        </member>
        <member name="P:Monda.ParseResult`1.Success">
            <summary>Indicates if this result was successful</summary>
        </member>
        <member name="T:Monda.ParseResult">
            <summary>
            Generic helper functions for constructing <see cref="T:Monda.ParseResult`1"/> instances
            </summary>
        </member>
        <member name="M:Monda.ParseResult.Fail``1">
            <summary>
            Create a failure result with the default value for <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The underlying value type</typeparam>
            <returns>A failure <see cref="T:Monda.ParseResult`1"/> with it's value set to default(<typeparamref name="T"/>)</returns>
        </member>
        <member name="M:Monda.ParseResult.Fail``1(``0@)">
            <summary>
            Create a failure result with a specified value
            </summary>
            <typeparam name="T">The underlying value type</typeparam>
            <param name="value">The value of the result</param>
            <returns>A failure <see cref="T:Monda.ParseResult`1"/> with it's value set to <paramref name="value"/></returns>
        </member>
        <member name="M:Monda.ParseResult.Success``1(``0@,System.Int32,System.Int32)">
            <summary>
            Create a success result
            </summary>
            <typeparam name="T">The underlying value type</typeparam>
            <param name="value">The value of the result</param>
            <param name="start">The position at which the result started</param>
            <param name="length">The length of data used to parse <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="M:Monda.ParserExtensions.Then``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2})">
            <summary>
            Create a new parser that executes the current parser and <paramref name="next"/> in order and combines the results
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of the current parser</typeparam>
            <typeparam name="TNext">The result type of <paramref name="next"/></typeparam>
            <param name="self">The current parser</param>
            <param name="next">The next <see cref="T:Monda.Parser`2"/></param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes <paramref name="self"/> and <paramref name="next"/> is sequence and returns a <see cref="T:System.Tuple`2"/> of the results if both are successful</returns>
        </member>
        <member name="M:Monda.ParserExtensions.PrecededBy``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2})">
            <summary>
            Create a new parser that ensures that the current parser is preceded by <paramref name="previous"/>
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <typeparam name="TPrevious">The result type of <paramref name="previous"/></typeparam>
            <param name="self">The current parser</param>
            <param name="previous">The parser to execute before the current parser, its result will be discarded</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes <paramref name="previous"/> and <paramref name="self"/> in that order and returns the <typeparamref name="TResult"/> from <paramref name="self"/></returns>
            <remarks>Although the parsing position will be advanced accordingly, the result of <paramref name="previous"/> will be discarded. Use <see cref="M:Monda.ParserExtensions.Then``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2})"/> if you need to capture the result</remarks>
        </member>
        <member name="M:Monda.ParserExtensions.FollowedBy``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2})">
            <summary>
            Create a new parser that ensures that the current parser is followed by <paramref name="next"/>
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <typeparam name="TNext">The result type of <paramref name="next"/></typeparam>
            <param name="self">The current parser</param>
            <param name="next">The parser to execute after the current parser, its result will be discarded</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes <paramref name="self"/> and <paramref name="next"/> in that order and returns the <typeparamref name="TResult"/> from <paramref name="self"/></returns>
            <remarks>Although the parsing position will be advanced accordingly, the result of <paramref name="next"/> will be discarded. Use <see cref="M:Monda.ParserExtensions.Then``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2})"/> if you need to capture the result</remarks>
        </member>
        <member name="M:Monda.ParserExtensions.Or``2(Monda.Parser{``0,``1},Monda.Parser{``0,``1})">
            <summary>
            Create a new parser that executes the current parser, or <paramref name="other"/> if the current parser fails
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/> and <paramref name="other"/></typeparam>
            <param name="self">The current parser</param>
            <param name="other">The other parser to execute if the current one is fails</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that returns the first successful result of the current parser and <paramref name="other"/> in that order</returns>
        </member>
        <member name="M:Monda.ParserExtensions.Between``4(Monda.Parser{``0,``1},Monda.Parser{``0,``2},Monda.Parser{``0,``3})">
            <summary>
            Creates a new parser that ensures that the current parser is between <paramref name="left"/> and <paramref name="right"/>
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <typeparam name="TLeft">The result type of <paramref name="left"/></typeparam>
            <typeparam name="TRight">The result type of <paramref name="right"/></typeparam>
            <param name="self">The current parser</param>
            <param name="left">The first parser to be executed</param>
            <param name="right">The last parser to execute</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that returns the result of the current parser if it is found between <paramref name="left"/> and <paramref name="right"/></returns>
        </member>
        <member name="M:Monda.ParserExtensions.Map``3(Monda.Parser{``0,``1},Monda.MapFunction{``0,``1,``2})">
            <summary>
            Create a new parser that maps the result of the current parser to a new value
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <typeparam name="TNext">The mapped value type</typeparam>
            <param name="self">The current parser</param>
            <param name="map">A function that maps the value from the current parser to a new value</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes the current parser and maps the value to a new value</returns>
        </member>
        <member name="M:Monda.ParserExtensions.TryMap``3(Monda.Parser{``0,``1},Monda.TryMapFunction{``0,``1,``2})">
            <summary>
            Create a new parser that tries to map the result of the current parser to a new value
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <typeparam name="TNext">The mapped value type</typeparam>
            <param name="self">The current parser</param>
            <param name="tryMap">A function that tries to map the value from the current parser to a new value</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes the current parser and tries to map the value to a new value</returns>
        </member>
        <member name="M:Monda.ParserExtensions.Repeat``2(Monda.Parser{``0,``1},System.Int32)">
            <summary>
            Create a new parser that executes the current parser a fixed number of times and aggregates the results
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <param name="self">The current parser</param>
            <param name="count">The number of times to repeat the current parser</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes the current parser <paramref name="count"/> times and aggregates the results</returns>
            <exception cref="T:System.StackOverflowException">If the current parser returns a zero-length result</exception>
            <seealso cref="M:Monda.ParserExtensions.Skip``2(Monda.Parser{``0,``1},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.Many``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:Monda.ParserExtensions.ManyUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.SkipMany``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:Monda.ParserExtensions.SkipUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)"/>
        </member>
        <member name="M:Monda.ParserExtensions.Many``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Create a new parser that executes the current parser until failure or an upper bound is reached and aggregates the results
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <param name="self">The current parser</param>
            <param name="min">The minimum number of times the parser must execute (inclusive)</param>
            <param name="max">The maximum number of times the parser can execute (inclusive). A null value indicates there is no upper bound</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes the current parser between <paramref name="min"/> and <paramref name="max"/> times and aggregates the results</returns>
            <exception cref="T:System.StackOverflowException">If the current parser returns a zero-length result</exception>
            <seealso cref="M:Monda.ParserExtensions.Repeat``2(Monda.Parser{``0,``1},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.ManyUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.Skip``2(Monda.Parser{``0,``1},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.SkipMany``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:Monda.ParserExtensions.SkipUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)"/>
        </member>
        <member name="M:Monda.ParserExtensions.ManyUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)">
            <summary>
            Create a new parser that executes the current parser until another parser succeeds, then aggregates and combines the results
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <param name="self">The current parser</param>
            <param name="next">The parser that determines when to stop repeating</param>
            <param name="min">The minimum number of times the parser must execute</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes the current parser until <paramref name="next"/> succeeds, aggregating and combining the results</returns>
            <exception cref="T:System.StackOverflowException">If the current parser returns a zero-length result</exception>
            <seealso cref="M:Monda.ParserExtensions.Repeat``2(Monda.Parser{``0,``1},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.Many``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:Monda.ParserExtensions.Skip``2(Monda.Parser{``0,``1},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.SkipMany``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:Monda.ParserExtensions.SkipUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Monda.ParserExtensions.Skip``2(Monda.Parser{``0,``1},System.Int32)" -->
        <member name="M:Monda.ParserExtensions.SkipMany``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Create a new parser that executes the current parser until failure or an upper bound is reached and counts the number of results
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <param name="self">The current parser</param>
            <param name="min">The minimum number of times the parser must execute (inclusive)</param>
            <param name="max">The maximum number of times the parser can execute (inclusive). A null value indicates there is no upper bound</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes the current parser between <paramref name="min"/> and <paramref name="max"/> times and counts the number results</returns>
            <exception cref="T:System.StackOverflowException">If the current parser returns a zero-length result</exception>
            <seealso cref="M:Monda.ParserExtensions.Repeat``2(Monda.Parser{``0,``1},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.Many``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:Monda.ParserExtensions.ManyUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.Skip``2(Monda.Parser{``0,``1},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.SkipUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)"/>
        </member>
        <member name="M:Monda.ParserExtensions.SkipUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)">
            <summary>
            Create a new parser that executes the current parser until another parser succeeds, then counts and combines the results
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <param name="self">The current parser</param>
            <param name="next">The parser that determines when to stop repeating</param>
            <param name="min">The minimum number of times the parser must execute</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes the current parser until <paramref name="next"/> succeeds, counting and combining the results</returns>
            <exception cref="T:System.StackOverflowException">If the current parser returns a zero-length successful result</exception>
            <seealso cref="M:Monda.ParserExtensions.Repeat``2(Monda.Parser{``0,``1},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.Many``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})"/>
            <seealso cref="M:Monda.ParserExtensions.ManyUntil``3(Monda.Parser{``0,``1},Monda.Parser{``0,``2},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.Skip``2(Monda.Parser{``0,``1},System.Int32)"/>
            <seealso cref="M:Monda.ParserExtensions.SkipMany``2(Monda.Parser{``0,``1},System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:Monda.ParserExtensions.Optional``2(Monda.Parser{``0,``1},``1)">
            <summary>
            Create a parser that returns a zero-length default result if the current parser fails
            </summary>
            <typeparam name="TSource">The type of items in the input data</typeparam>
            <typeparam name="TResult">The result type of <paramref name="self"/></typeparam>
            <param name="self">The current parser</param>
            <param name="defaultValue">The default value to return if the current parser fails</param>
            <returns>A new <see cref="T:Monda.Parser`2"/> that executes the current parser, returning its result when successful or a default zero-length result otherwise</returns>
        </member>
        <member name="T:Monda.Range">
            <summary>
            Represents start and length properties that define a range in contiguous data
            </summary>
        </member>
    </members>
</doc>
